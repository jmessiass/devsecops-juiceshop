name: Security Scan New
permissions:
  contents: write
  security-events: write

on:
  push:

jobs:
  # run_sast:
  #   runs-on: ubuntu-latest
  #   container:
  #     image: returntocorp/semgrep

  #   steps:
  #     - name: clone application source code
  #       uses: actions/checkout@v3

  #     - name: capture repository owner and name
  #       run: |
  #         REPO_NAME=$(echo $GITHUB_REPOSITORY | cut -d'/' -f2)
  #         echo "REPO_NAME=$REPO_NAME" >> $GITHUB_ENV
  #         echo "REPO: $REPO_NAME"

  #         CODEOWNERS_FILE=".github/CODEOWNERS"
          
  #         # Verifica se o arquivo CODEOWNERS existe
  #         if [ -f "$CODEOWNERS_FILE" ]; then
  #           # Extrai todos os valores que come√ßam com @ (usu√°rios ou equipes) e os junta em uma √∫nica linha, separados por v√≠rgulas
  #           OWNERS=$(grep -o '@[a-zA-Z0-9/_-]*' "$CODEOWNERS_FILE" | awk -F'/' '{print $2}' | paste -sd "," -)
  #           echo "OWNERS=$OWNERS" >> $GITHUB_ENV
  #           echo "CODEOWNERS: $OWNERS"
  #         else
  #           echo "CODEOWNERS file not found in $CODEOWNERS_FILE."
  #           exit 1
  #         fi

  #     - name: run semgrep
  #       run: |
  #         semgrep --config="p/default" --json --output=sast-report.json


  run_sast:
    if: (github.actor != 'dependabot[bot]')
    name: SAST Scan
    runs-on: ubuntu-latest

    container:
      image: returntocorp/semgrep

    steps:
      - name: üèó Checkout code
        uses: actions/checkout@v4
      
      - name: ü©∫ Run SAST - Semgrep 
        run: semgrep ci --json -o sast-report.json || true
        env: 
          SEMGREP_RULES: ${{ github.event_name == 'pull_request' && 'p/cwe-top-25 p/owasp-top-ten p/r2c-security-audit p/javascript p/trailofbits' || 'p/default' }} 
 
      - name: üèó Save Semgrep Report
        uses: actions/upload-artifact@v4
        with:
          name: sast-report
          path: sast-report.json

  run_sca:
    name: SCA Scan
    runs-on: ubuntu-latest
    steps:
      - name: üèó Checkout code
        uses: actions/checkout@v4

      - name: ü©∫ Run SCA - Trivy
        uses: aquasecurity/trivy-action@0.20.0
        with:
          scan-type: 'fs'
          format: 'json'
          output: 'sca-report.json'
          severity: 'CRITICAL,HIGH'

      - name: üèó Save Trivy Report
        uses: actions/upload-artifact@v4
        with:
          name: sca-report
          path: 'sca-report.json'

  checkov-secrets-scan:
      name: Checkov Secrets Scan
      runs-on: ubuntu-latest

      steps:
        - name: Checkout code
          uses: actions/checkout@v3

        - name: Set up Python
          uses: actions/setup-python@v4
          with:
            python-version: '3.x'

        - name: Install Checkov
          run: |
            pip install checkov

        - name: Run Checkov for secrets scanning
          run: |
            checkov -d . --check CKV_SECRET

  run_secrets_scan:
      runs-on: ubuntu-latest
      steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Run Gitleaks
        uses: zricethezav/gitleaks-action@v2.2.0
        with:
          args: --path=. --verbose --redact

  # run_iac_scan:
  #   runs-on: ubuntu-20.04
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v3

  #     - name: Run Trivy vulnerability scanner in IaC Scan mode
  #       uses: aquasecurity/trivy-action@master
  #       with:
  #         scan-type: 'fs'
  #         ignore-unfixed: true
  #         format: 'json'
  #         output: 'sca-report.json'
  #         severity: 'CRITICAL,HIGH'

  #     - name: Upload Trivy report
  #       uses: actions/upload-artifact@v3
  #       with:
  #         name: sca-report
  #         path: 'sca-report.json'

  # run_dast:
  #   runs-on: ubuntu-latest

  #   steps:
  #     - name: Setup Docker
  #       uses: docker/setup-buildx-action@v1

  #     - name: Start Juice Shop
  #       run: |
  #         docker run -d --rm \
  #         --name juice-shop \
  #         -p 3000:3000 \
  #         bkimminich/juice-shop

  #     - name: OWASP ZAP Full Scan (DAST)
  #       id: zap_scan
  #       uses: zaproxy/action-full-scan@v0.8.0
  #       with:
  #         target: 'http://127.0.0.1:3000'
  #         format: 'json'
  #         output: 'zap-report.json'
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  #     - name: Upload ZAP Report
  #       if: always()
  #       uses: actions/upload-artifact@v3
  #       with:
  #         name: ZAP Report
  #         path: zap-report.json

  # run_secrets_scan:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v3
  #       with:
  #         fetch-depth: 0

  #     - name: Install Gitleaks
  #       run: |
  #         curl -s https://api.github.com/repos/gitleaks/gitleaks/releases/latest | grep "browser_download_url.*linux_amd64.tar.gz" | cut -d : -f 2,3 | tr -d \" | wget -qi -
  #         tar -zxvf gitleaks*linux_amd64.tar.gz
  #         sudo mv gitleaks /usr/local/bin/

  #     - name: Run Gitleaks
  #       run: |
  #         gitleaks detect --source . --report-format json --report-path gitleaks-report.json

  #     - name: Upload Gitleaks JSON report
  #       uses: actions/upload-artifact@v3
  #       with:
  #         name: gitleaks-report
  #         path: gitleaks-report.json