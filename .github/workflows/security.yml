name: Security Scan
permissions:
  contents: write
  security-events: write

on:
  push:

jobs:
  run_sast:
    runs-on: ubuntu-latest
    container:
      image: returntocorp/semgrep

    steps:
      - name: clone application source code
        uses: actions/checkout@v3

      - name: capture repository owner and name
        # run: |
        #   OWNER_NAME=$(echo $GITHUB_REPOSITORY | cut -d'/' -f1)
        #   REPO_NAME=$(echo $GITHUB_REPOSITORY | cut -d'/' -f2)
        #   echo "OWNER_NAME=$OWNER_NAME" >> $GITHUB_ENV
        #   echo "REPO_NAME=$REPO_NAME" >> $GITHUB_ENV
        #   echo "$OWNER_NAME"
        #   echo "$REPO_NAME"
        run: |
          PATH_TO_CHECK="/.github"  # Especifique o caminho que deseja verificar
          CODEOWNERS_FILE=".github/CODEOWNERS"  # Caminho para o arquivo CODEOWNERS
          
          # Verifica se o arquivo CODEOWNERS existe
          if [ -f "$CODEOWNERS_FILE" ]; then
            OWNER=$(grep "^$PATH_TO_CHECK" "$CODEOWNERS_FILE" | awk '{print $2}')
            echo "OWNER=$OWNER" >> $GITHUB_ENV
            echo "The owner for $PATH_TO_CHECK is: $OWNER"
          else
            echo "CODEOWNERS file not found in $CODEOWNERS_FILE."
            exit 1
          fi

      # - name: run semgrep
      #   run: |
      #     semgrep --config="p/default" --json --output=semgrep-report.json

      # - name: save report as pipeline artifact
      #   uses: actions/upload-artifact@v3
      #   with:
      #     name: semgrep-report
      #     path: semgrep-report.json

  run_iac_scan:
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Run Trivy vulnerability scanner in IaC mode
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          ignore-unfixed: true
          format: 'json'
          output: 'trivy-report.json'
          severity: 'CRITICAL,HIGH'

      - name: Upload Trivy report
        uses: actions/upload-artifact@v3
        with:
          name: trivy-report
          path: 'trivy-report.json'


  # run_sca:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v3

  #     - name: Install dependencies
  #       run: |
  #         npm install
  #         npm install --package-lock

  #     - name: Run dependency check (SCA)
  #       uses: dependency-check/Dependency-Check_Action@main
  #       id: Depcheck
  #       with:
  #         project: 'juice-shop'
  #         path: '.'
  #         format: 'JSON'
  #         out: 'dependency-check-report.json'
  #         args: >
  #           --failOnCVSS 11
  #           --enableRetired
  #           --disableArchive --exclude **/*.zip

  #     - name: Upload Depcheck report
  #       if: always()
  #       uses: actions/upload-artifact@v3
  #       with:
  #         name: dependency-check-report
  #         path: dependency-check-report.json

  # run_dast:
  #   runs-on: ubuntu-latest

  #   steps:
  #     - name: Setup Docker
  #       uses: docker/setup-buildx-action@v1

  #     - name: Start Juice Shop
  #       run: |
  #         docker run -d --rm \
  #         --name juice-shop \
  #         -p 3000:3000 \
  #         bkimminich/juice-shop

  #     - name: OWASP ZAP Full Scan (DAST)
  #       id: zap_scan
  #       uses: zaproxy/action-full-scan@v0.8.0
  #       with:
  #         target: 'http://127.0.0.1:3000'
  #         format: 'json'
  #         output: 'zap-report.json'
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  #     - name: Upload ZAP Report
  #       if: always()
  #       uses: actions/upload-artifact@v3
  #       with:
  #         name: ZAP Report
  #         path: zap-report.json

  # run_secrets_scan:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v3
  #       with:
  #         fetch-depth: 0

  #     - name: Install Gitleaks
  #       run: |
  #         curl -s https://api.github.com/repos/gitleaks/gitleaks/releases/latest | grep "browser_download_url.*linux_amd64.tar.gz" | cut -d : -f 2,3 | tr -d \" | wget -qi -
  #         tar -zxvf gitleaks*linux_amd64.tar.gz
  #         sudo mv gitleaks /usr/local/bin/

  #     - name: Run Gitleaks
  #       run: |
  #         gitleaks detect --source . --report-format json --report-path gitleaks-report.json

  #     - name: Upload Gitleaks JSON report
  #       uses: actions/upload-artifact@v3
  #       with:
  #         name: gitleaks-report
  #         path: gitleaks-report.json